// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tasks.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const CreateTask = `-- name: CreateTask :one
INSERT INTO tasks (task_type) VALUES ($1)
RETURNING id
`

func (q *Queries) CreateTask(ctx context.Context, taskType int32) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, CreateTask, taskType)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const DeleteTaskByID = `-- name: DeleteTaskByID :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTaskByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteTaskByID, id)
	return err
}

const GetTaskByID = `-- name: GetTaskByID :one
SELECT id, status, task_type, created_at, updated_at FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, GetTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.TaskType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetTasks = `-- name: GetTasks :many
SELECT id, status, task_type, created_at, updated_at FROM tasks
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, GetTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.TaskType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE tasks SET status = $1 WHERE id = $2
`

type UpdateTaskStatusParams struct {
	Status int32     `db:"status" json:"status"`
	ID     uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) error {
	_, err := q.db.Exec(ctx, UpdateTaskStatus, arg.Status, arg.ID)
	return err
}
