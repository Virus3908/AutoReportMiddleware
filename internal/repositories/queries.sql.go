// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const CreateConversation = `-- name: CreateConversation :exec
INSERT INTO Conversations (conversation_name, file_url) VALUES ($1, $2)
`

type CreateConversationParams struct {
	ConversationName string `db:"conversation_name" json:"conversation_name"`
	FileUrl          string `db:"file_url" json:"file_url"`
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) error {
	_, err := q.db.Exec(ctx, CreateConversation, arg.ConversationName, arg.FileUrl)
	return err
}

const CreateConvert = `-- name: CreateConvert :exec
INSERT INTO convert (task_id) VALUES ($1)
`

func (q *Queries) CreateConvert(ctx context.Context, taskID uuid.UUID) error {
	_, err := q.db.Exec(ctx, CreateConvert, taskID)
	return err
}

const CreateParticipant = `-- name: CreateParticipant :exec
INSERT INTO Participants (name, email) VALUES ($1, $2)
`

type CreateParticipantParams struct {
	Name  *string `db:"name" json:"name"`
	Email string  `db:"email" json:"email"`
}

func (q *Queries) CreateParticipant(ctx context.Context, arg CreateParticipantParams) error {
	_, err := q.db.Exec(ctx, CreateParticipant, arg.Name, arg.Email)
	return err
}

const CreatePrompt = `-- name: CreatePrompt :exec
INSERT INTO Prompts (prompt) VALUES ($1)
`

func (q *Queries) CreatePrompt(ctx context.Context, prompt string) error {
	_, err := q.db.Exec(ctx, CreatePrompt, prompt)
	return err
}

const DeleteConversationByID = `-- name: DeleteConversationByID :one
DELETE FROM Conversations
WHERE id = $1
RETURNING file_url
`

func (q *Queries) DeleteConversationByID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, DeleteConversationByID, id)
	var file_url string
	err := row.Scan(&file_url)
	return file_url, err
}

const DeleteParticipantByID = `-- name: DeleteParticipantByID :exec
DELETE FROM Participants WHERE id = $1
`

func (q *Queries) DeleteParticipantByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeleteParticipantByID, id)
	return err
}

const DeletePromptByID = `-- name: DeletePromptByID :exec
DELETE FROM Prompts WHERE id = $1
`

func (q *Queries) DeletePromptByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeletePromptByID, id)
	return err
}

const GetConversationByID = `-- name: GetConversationByID :one
SELECT id, conversation_name, file_url, status, created_at, updated_at FROM Conversations WHERE id = $1
`

func (q *Queries) GetConversationByID(ctx context.Context, id uuid.UUID) (Conversation, error) {
	row := q.db.QueryRow(ctx, GetConversationByID, id)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.ConversationName,
		&i.FileUrl,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetConversations = `-- name: GetConversations :many
SELECT id, conversation_name, file_url, status, created_at, updated_at FROM Conversations
`

func (q *Queries) GetConversations(ctx context.Context) ([]Conversation, error) {
	rows, err := q.db.Query(ctx, GetConversations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Conversation{}
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.ConversationName,
			&i.FileUrl,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetParticipantByID = `-- name: GetParticipantByID :one
SELECT id, name, email, created_at, updated_at FROM Participants WHERE id = $1
`

func (q *Queries) GetParticipantByID(ctx context.Context, id uuid.UUID) (Participant, error) {
	row := q.db.QueryRow(ctx, GetParticipantByID, id)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetParticipants = `-- name: GetParticipants :many
SELECT id, name, email, created_at, updated_at FROM Participants
`

func (q *Queries) GetParticipants(ctx context.Context) ([]Participant, error) {
	rows, err := q.db.Query(ctx, GetParticipants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Participant{}
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetPromptByID = `-- name: GetPromptByID :one
SELECT id, prompt, created_at, updated_at FROM Prompts WHERE id = $1
`

func (q *Queries) GetPromptByID(ctx context.Context, id uuid.UUID) (Prompt, error) {
	row := q.db.QueryRow(ctx, GetPromptByID, id)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.Prompt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPrompts = `-- name: GetPrompts :many
SELECT id, prompt, created_at, updated_at FROM Prompts
`

func (q *Queries) GetPrompts(ctx context.Context) ([]Prompt, error) {
	rows, err := q.db.Query(ctx, GetPrompts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Prompt{}
	for rows.Next() {
		var i Prompt
		if err := rows.Scan(
			&i.ID,
			&i.Prompt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateConversationNameByID = `-- name: UpdateConversationNameByID :exec
UPDATE Conversations SET conversation_name = $1 WHERE id = $2
`

type UpdateConversationNameByIDParams struct {
	ConversationName string    `db:"conversation_name" json:"conversation_name"`
	ID               uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateConversationNameByID(ctx context.Context, arg UpdateConversationNameByIDParams) error {
	_, err := q.db.Exec(ctx, UpdateConversationNameByID, arg.ConversationName, arg.ID)
	return err
}

const UpdateConversationStatusByID = `-- name: UpdateConversationStatusByID :exec
UPDATE conversations SET status = $1 WHERE id = $2
`

type UpdateConversationStatusByIDParams struct {
	Status int32     `db:"status" json:"status"`
	ID     uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateConversationStatusByID(ctx context.Context, arg UpdateConversationStatusByIDParams) error {
	_, err := q.db.Exec(ctx, UpdateConversationStatusByID, arg.Status, arg.ID)
	return err
}

const UpdateConvertByTaskID = `-- name: UpdateConvertByTaskID :exec
UPDATE convert SET file_url = $1, status = $2 WHERE task_id = $3
`

type UpdateConvertByTaskIDParams struct {
	FileUrl *string   `db:"file_url" json:"file_url"`
	Status  int32     `db:"status" json:"status"`
	TaskID  uuid.UUID `db:"task_id" json:"task_id"`
}

func (q *Queries) UpdateConvertByTaskID(ctx context.Context, arg UpdateConvertByTaskIDParams) error {
	_, err := q.db.Exec(ctx, UpdateConvertByTaskID, arg.FileUrl, arg.Status, arg.TaskID)
	return err
}

const UpdateParticipantByID = `-- name: UpdateParticipantByID :exec
UPDATE Participants SET name = $1, email = $2 WHERE id = $3
`

type UpdateParticipantByIDParams struct {
	Name  *string   `db:"name" json:"name"`
	Email string    `db:"email" json:"email"`
	ID    uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateParticipantByID(ctx context.Context, arg UpdateParticipantByIDParams) error {
	_, err := q.db.Exec(ctx, UpdateParticipantByID, arg.Name, arg.Email, arg.ID)
	return err
}

const UpdatePromptByID = `-- name: UpdatePromptByID :exec
UPDATE Prompts SET prompt = $1 WHERE id = $2
`

type UpdatePromptByIDParams struct {
	Prompt string    `db:"prompt" json:"prompt"`
	ID     uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdatePromptByID(ctx context.Context, arg UpdatePromptByIDParams) error {
	_, err := q.db.Exec(ctx, UpdatePromptByID, arg.Prompt, arg.ID)
	return err
}
