// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: promts.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const CreatePrompt = `-- name: CreatePrompt :exec
INSERT INTO Prompts (prompt) VALUES ($1)
`

func (q *Queries) CreatePrompt(ctx context.Context, prompt string) error {
	_, err := q.db.Exec(ctx, CreatePrompt, prompt)
	return err
}

const DeletePromptByID = `-- name: DeletePromptByID :exec
DELETE FROM Prompts WHERE id = $1
`

func (q *Queries) DeletePromptByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, DeletePromptByID, id)
	return err
}

const GetPromptByID = `-- name: GetPromptByID :one
SELECT id, prompt, created_at, updated_at FROM Prompts WHERE id = $1
`

func (q *Queries) GetPromptByID(ctx context.Context, id uuid.UUID) (Prompt, error) {
	row := q.db.QueryRow(ctx, GetPromptByID, id)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.Prompt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPrompts = `-- name: GetPrompts :many
SELECT id, prompt, created_at, updated_at FROM Prompts
`

func (q *Queries) GetPrompts(ctx context.Context) ([]Prompt, error) {
	rows, err := q.db.Query(ctx, GetPrompts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Prompt{}
	for rows.Next() {
		var i Prompt
		if err := rows.Scan(
			&i.ID,
			&i.Prompt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePromptByID = `-- name: UpdatePromptByID :exec
UPDATE Prompts SET prompt = $1 WHERE id = $2
`

type UpdatePromptByIDParams struct {
	Prompt string    `db:"prompt" json:"prompt"`
	ID     uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdatePromptByID(ctx context.Context, arg UpdatePromptByIDParams) error {
	_, err := q.db.Exec(ctx, UpdatePromptByID, arg.Prompt, arg.ID)
	return err
}
