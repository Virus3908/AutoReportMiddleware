// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: participant.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createParticipant = `-- name: CreateParticipant :exec
INSERT INTO Participants (name, email) VALUES ($1, $2)
`

type CreateParticipantParams struct {
	Name  *string `json:"name"`
	Email string  `json:"email"`
}

func (q *Queries) CreateParticipant(ctx context.Context, arg CreateParticipantParams) error {
	_, err := q.db.Exec(ctx, createParticipant, arg.Name, arg.Email)
	return err
}

const deleteParticipantByID = `-- name: DeleteParticipantByID :exec
DELETE FROM Participants WHERE id = $1
`

func (q *Queries) DeleteParticipantByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteParticipantByID, id)
	return err
}

const getParticipantByID = `-- name: GetParticipantByID :one
SELECT id, name, email, created_at, updated_at FROM Participants WHERE id = $1
`

func (q *Queries) GetParticipantByID(ctx context.Context, id uuid.UUID) (Participant, error) {
	row := q.db.QueryRow(ctx, getParticipantByID, id)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getParticipants = `-- name: GetParticipants :many
SELECT id, name, email, created_at, updated_at FROM Participants
`

func (q *Queries) GetParticipants(ctx context.Context) ([]Participant, error) {
	rows, err := q.db.Query(ctx, getParticipants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Participant
	for rows.Next() {
		var i Participant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParticipantByID = `-- name: UpdateParticipantByID :exec
UPDATE Participants SET name = $1, email = $2 WHERE id = $3
`

type UpdateParticipantByIDParams struct {
	Name  *string   `json:"name"`
	Email string    `json:"email"`
	ID    uuid.UUID `json:"id"`
}

func (q *Queries) UpdateParticipantByID(ctx context.Context, arg UpdateParticipantByIDParams) error {
	_, err := q.db.Exec(ctx, updateParticipantByID, arg.Name, arg.Email, arg.ID)
	return err
}
