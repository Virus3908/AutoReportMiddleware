// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: semi_report.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createSemiReport = `-- name: CreateSemiReport :exec
INSERT INTO
    semi_report (
        conversation_id,
        prompt_id,
        task_id,
        part_num
    )
VALUES ($1, $2, $3, $4)
`

type CreateSemiReportParams struct {
	ConversationID uuid.UUID `json:"conversation_id"`
	PromptID       uuid.UUID `json:"prompt_id"`
	TaskID         uuid.UUID `json:"task_id"`
	PartNum        int32     `json:"part_num"`
}

func (q *Queries) CreateSemiReport(ctx context.Context, arg CreateSemiReportParams) error {
	_, err := q.db.Exec(ctx, createSemiReport,
		arg.ConversationID,
		arg.PromptID,
		arg.TaskID,
		arg.PartNum,
	)
	return err
}

const getCountOfUnSemiReportedParts = `-- name: GetCountOfUnSemiReportedParts :one
SELECT COUNT(*)
FROM
    semi_report
WHERE conversation_id = $1 AND semi_report IS NULL
`

func (q *Queries) GetCountOfUnSemiReportedParts(ctx context.Context, conversationID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getCountOfUnSemiReportedParts, conversationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSemiReportByConversationID = `-- name: GetSemiReportByConversationID :many
SELECT id, conversation_id, semi_report, part_num, prompt_id, task_id, created_at, updated_at
FROM
    semi_report
WHERE conversation_id = $1
ORDER BY part_num ASC
`

func (q *Queries) GetSemiReportByConversationID(ctx context.Context, conversationID uuid.UUID) ([]SemiReport, error) {
	rows, err := q.db.Query(ctx, getSemiReportByConversationID, conversationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SemiReport
	for rows.Next() {
		var i SemiReport
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.SemiReport,
			&i.PartNum,
			&i.PromptID,
			&i.TaskID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSemiReportByTaskID = `-- name: UpdateSemiReportByTaskID :exec
UPDATE semi_report
SET
    semi_report = $1
WHERE
    task_id = $2
`

type UpdateSemiReportByTaskIDParams struct {
	SemiReport *string   `json:"semi_report"`
	TaskID     uuid.UUID `json:"task_id"`
}

func (q *Queries) UpdateSemiReportByTaskID(ctx context.Context, arg UpdateSemiReportByTaskIDParams) error {
	_, err := q.db.Exec(ctx, updateSemiReportByTaskID, arg.SemiReport, arg.TaskID)
	return err
}
