// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transcriptions.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTranscriptionWithTaskAndSegmentID = `-- name: CreateTranscriptionWithTaskAndSegmentID :exec
INSERT INTO transcriptions (task_id, segment_id) VALUES ($1, $2)
`

type CreateTranscriptionWithTaskAndSegmentIDParams struct {
	TaskID    uuid.UUID `json:"task_id"`
	SegmentID uuid.UUID `json:"segment_id"`
}

func (q *Queries) CreateTranscriptionWithTaskAndSegmentID(ctx context.Context, arg CreateTranscriptionWithTaskAndSegmentIDParams) error {
	_, err := q.db.Exec(ctx, createTranscriptionWithTaskAndSegmentID, arg.TaskID, arg.SegmentID)
	return err
}

const getCountOfUntranscribedSegments = `-- name: GetCountOfUntranscribedSegments :one
SELECT COUNT(*)
FROM
    conversations AS c
    JOIN convert AS conv ON c.id = conv.conversations_id
    JOIN diarize AS d ON conv.id = d.convert_id
    JOIN segments AS s ON d.id = s.diarize_id
    JOIN transcriptions AS t ON s.id = t.segment_id
WHERE
    c.id = $1
    AND t.transcription IS NULL
`

func (q *Queries) GetCountOfUntranscribedSegments(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getCountOfUntranscribedSegments, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateTransctiptionTextByID = `-- name: UpdateTransctiptionTextByID :exec
UPDATE transcriptions SET transcription = $1 WHERE task_id = $2
`

type UpdateTransctiptionTextByIDParams struct {
	Transcription *string   `json:"transcription"`
	TaskID        uuid.UUID `json:"task_id"`
}

func (q *Queries) UpdateTransctiptionTextByID(ctx context.Context, arg UpdateTransctiptionTextByIDParams) error {
	_, err := q.db.Exec(ctx, updateTransctiptionTextByID, arg.Transcription, arg.TaskID)
	return err
}
