// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: promts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPrompt = `-- name: CreatePrompt :exec
INSERT INTO Prompts (prompt_name, prompt) VALUES ($1, $2)
`

type CreatePromptParams struct {
	PromptName string `json:"prompt_name"`
	Prompt     string `json:"prompt"`
}

func (q *Queries) CreatePrompt(ctx context.Context, arg CreatePromptParams) error {
	_, err := q.db.Exec(ctx, createPrompt, arg.PromptName, arg.Prompt)
	return err
}

const deletePromptByID = `-- name: DeletePromptByID :exec
DELETE FROM Prompts WHERE id = $1
`

func (q *Queries) DeletePromptByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePromptByID, id)
	return err
}

const getPromptByID = `-- name: GetPromptByID :one
SELECT id, prompt_name, prompt, created_at, updated_at FROM Prompts WHERE id = $1
`

func (q *Queries) GetPromptByID(ctx context.Context, id uuid.UUID) (Prompt, error) {
	row := q.db.QueryRow(ctx, getPromptByID, id)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.PromptName,
		&i.Prompt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPrompts = `-- name: GetPrompts :many
SELECT id, prompt_name, prompt, created_at, updated_at FROM Prompts
ORDER BY created_at DESC
`

func (q *Queries) GetPrompts(ctx context.Context) ([]Prompt, error) {
	rows, err := q.db.Query(ctx, getPrompts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prompt
	for rows.Next() {
		var i Prompt
		if err := rows.Scan(
			&i.ID,
			&i.PromptName,
			&i.Prompt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePromptByID = `-- name: UpdatePromptByID :exec
UPDATE Prompts SET prompt = $1, prompt_name = $2 WHERE id = $3
`

type UpdatePromptByIDParams struct {
	Prompt     string    `json:"prompt"`
	PromptName string    `json:"prompt_name"`
	ID         uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePromptByID(ctx context.Context, arg UpdatePromptByIDParams) error {
	_, err := q.db.Exec(ctx, updatePromptByID, arg.Prompt, arg.PromptName, arg.ID)
	return err
}
