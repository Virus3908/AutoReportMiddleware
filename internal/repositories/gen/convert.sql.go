// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: convert.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createConvert = `-- name: CreateConvert :exec
INSERT INTO convert(conversations_id, task_id) VALUES ($1, $2)
`

type CreateConvertParams struct {
	ConversationsID uuid.UUID `json:"conversations_id"`
	TaskID          uuid.UUID `json:"task_id"`
}

func (q *Queries) CreateConvert(ctx context.Context, arg CreateConvertParams) error {
	_, err := q.db.Exec(ctx, createConvert, arg.ConversationsID, arg.TaskID)
	return err
}

const deleteConvertByForgeinID = `-- name: DeleteConvertByForgeinID :one
DELETE FROM convert WHERE conversations_id = $1 RETURNING id
`

func (q *Queries) DeleteConvertByForgeinID(ctx context.Context, conversationsID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteConvertByForgeinID, conversationsID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteConvertByID = `-- name: DeleteConvertByID :exec
DELETE FROM convert WHERE id = $1
`

func (q *Queries) DeleteConvertByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteConvertByID, id)
	return err
}

const getConvert = `-- name: GetConvert :many
SELECT id, conversations_id, file_url, audio_len, task_id, created_at, updated_at FROM convert
`

func (q *Queries) GetConvert(ctx context.Context) ([]Convert, error) {
	rows, err := q.db.Query(ctx, getConvert)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Convert
	for rows.Next() {
		var i Convert
		if err := rows.Scan(
			&i.ID,
			&i.ConversationsID,
			&i.FileUrl,
			&i.AudioLen,
			&i.TaskID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConvertByID = `-- name: GetConvertByID :one
SELECT id, conversations_id, file_url, audio_len, task_id, created_at, updated_at FROM convert WHERE id = $1
`

func (q *Queries) GetConvertByID(ctx context.Context, id uuid.UUID) (Convert, error) {
	row := q.db.QueryRow(ctx, getConvertByID, id)
	var i Convert
	err := row.Scan(
		&i.ID,
		&i.ConversationsID,
		&i.FileUrl,
		&i.AudioLen,
		&i.TaskID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConvertFileURLByConversationID = `-- name: GetConvertFileURLByConversationID :one
SELECT convert.file_url, convert.ID
FROM convert
WHERE
    conversations_id = $1
`

type GetConvertFileURLByConversationIDRow struct {
	FileUrl *string   `json:"file_url"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) GetConvertFileURLByConversationID(ctx context.Context, conversationsID uuid.UUID) (GetConvertFileURLByConversationIDRow, error) {
	row := q.db.QueryRow(ctx, getConvertFileURLByConversationID, conversationsID)
	var i GetConvertFileURLByConversationIDRow
	err := row.Scan(&i.FileUrl, &i.ID)
	return i, err
}

const updateConvertByTaskID = `-- name: UpdateConvertByTaskID :exec
UPDATE convert
SET
    file_url = $1,
    audio_len = $2
WHERE
    task_id = $3
`

type UpdateConvertByTaskIDParams struct {
	FileUrl  *string   `json:"file_url"`
	AudioLen *float64  `json:"audio_len"`
	TaskID   uuid.UUID `json:"task_id"`
}

func (q *Queries) UpdateConvertByTaskID(ctx context.Context, arg UpdateConvertByTaskIDParams) error {
	_, err := q.db.Exec(ctx, updateConvertByTaskID, arg.FileUrl, arg.AudioLen, arg.TaskID)
	return err
}
