// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: report.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createReport = `-- name: CreateReport :exec
INSERT INTO
    reports (
        conversation_id,
        prompt_id,
        task_id
    )
VALUES ($1, $2, $3)
`

type CreateReportParams struct {
	ConversationID uuid.UUID `json:"conversation_id"`
	PromptID       uuid.UUID `json:"prompt_id"`
	TaskID         uuid.UUID `json:"task_id"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) error {
	_, err := q.db.Exec(ctx, createReport, arg.ConversationID, arg.PromptID, arg.TaskID)
	return err
}

const getReportByConversationID = `-- name: GetReportByConversationID :one
SELECT id, conversation_id, report, prompt_id, task_id, created_at, updated_at
FROM
    reports
WHERE conversation_id = $1
ORDER BY updated_at DESC
`

func (q *Queries) GetReportByConversationID(ctx context.Context, conversationID uuid.UUID) (Report, error) {
	row := q.db.QueryRow(ctx, getReportByConversationID, conversationID)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.Report,
		&i.PromptID,
		&i.TaskID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateReportByTaskID = `-- name: UpdateReportByTaskID :exec
UPDATE reports
SET
    report = $1
WHERE
    task_id = $2
`

type UpdateReportByTaskIDParams struct {
	Report *string   `json:"report"`
	TaskID uuid.UUID `json:"task_id"`
}

func (q *Queries) UpdateReportByTaskID(ctx context.Context, arg UpdateReportByTaskIDParams) error {
	_, err := q.db.Exec(ctx, updateReportByTaskID, arg.Report, arg.TaskID)
	return err
}
